/***************************************************************************
 *   This file is part of the FrB project                                  *
 *                                                                         *
 *   FrB project                                                           *
 *                                                                         *
 *   Copyright (C) 2006 by GUILLAUME Nicolas                               *
 *   ng@ngsoft-fr.com                                                      *
 *                                                                         *
 *   http://frb.ngsoft-fr.com/                                             *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See the COPYING file.                                                 *
 ***************************************************************************/






/*                   FrBDebug                       */
FrBCppClass * FrBDebug::_cpp_class = 0;



template<class T>
FrBBaseObject * print_FrBObject(FrBExecutionEnvironment&, FrBBaseObject*, FrBBaseObject * arg0)
{

    frb_assert2(arg0, "null pointer passed to Debug::print()");
    
    std::cout << (static_cast<T*>(arg0))->value();

    return 0;
}

template<class T>
FrBBaseObject * println_FrBObject(FrBExecutionEnvironment&, FrBBaseObject*, FrBBaseObject * arg0)
{

    frb_assert2(arg0, "null pointer passed to Debug::println()");
    
    std::cout << (static_cast<T*>(arg0))->value() << std::endl;

    return 0;
}

template<class T>
FrBBaseObject * printwr_FrBObject(FrBExecutionEnvironment&, FrBBaseObject*, FrBBaseObject * arg0)
{
    //print with ref
    frb_assert2(arg0, "null pointer passed to Debug::printwr()");
    
    std::cout << '[' << (static_cast<T*>(arg0))->value()  << '@' << arg0 << ']' << std::endl;

    return 0;
}

FrBBaseObject * dbg_addressof(FrBExecutionEnvironment& e, FrBBaseObject*, FrBBaseObject * arg0)
{
    FrBBaseObject * o = new FrBInt( ((unsigned long int)arg0) );
    e.addGarbagedObject(o);
    return o;
}

FrBBaseObject * dbg_typename(FrBExecutionEnvironment& e, FrBBaseObject*, FrBBaseObject * arg0)
{
    FrBBaseObject * o = new FrBString( arg0->getClass()->fullName() );
    e.addGarbagedObject(o);
    return o;
}


FrBBaseObject * constructor1(FrBExecutionEnvironment&, FrBBaseObject * me)
{

    std::cout << "Debug.Initialize() called\n";

    return 0;
}

FrBBaseObject * show_stack(FrBExecutionEnvironment& e, FrBBaseObject * me)
{
    e.stack().print();
    return 0;
}

FrBBaseObject * show_mem(FrBExecutionEnvironment& e, FrBBaseObject * me)
{
    e.memory()->print(1);
    return 0;
}


FrBCppClass * FrBDebug::initClass()
{
    frb_assert2(_cpp_class == NULL, "FrBDebug::initClass(), already initialized");
    
    _cpp_class = new FrBCppClass(new FrBDebug::Allocator());
    _cpp_class->setName("Debug");
    _cpp_class->setSealed(true);
    _cpp_class->setScope(SC_PUBLIC);
    

    FrBCppFunction * f = new FrBNoParamCppFunction(constructor1);
    f->setName("$init");
    f->setSub(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addConstructor(f);

    f = new FrBUnaryCppFunction(dbg_typename, FrBObject::getCppClass(), false);
    f->setName("typename");
    f->setReturnType(FrBString::getCppClass());
    f->setSub(false);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f); 
    
    f = new FrBUnaryCppFunction(dbg_addressof, FrBObject::getCppClass(), false);
    f->setName("addressof");
    f->setReturnType(FrBInt::getCppClass());
    f->setSub(false);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);    

    f = new FrBUnaryCppFunction(print_FrBObject<FrBInt>, FrBInt::getCppClass(), false);
    f->setName("print");
    f->setSub(true);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);
    
    f = new FrBUnaryCppFunction(print_FrBObject<FrBString>, FrBString::getCppClass(), false);
    f->setName("print");
    f->setSub(true);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);
    
    f = new FrBUnaryCppFunction(println_FrBObject<FrBInt>, FrBInt::getCppClass(), false);
    f->setName("println");
    f->setSub(true);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);
    
    f = new FrBUnaryCppFunction(println_FrBObject<FrBString>, FrBString::getCppClass(), false);
    f->setName("println");
    f->setSub(true);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);
    
    f = new FrBUnaryCppFunction(printwr_FrBObject<FrBInt>, FrBInt::getCppClass(), false);
    f->setName("printwr");
    f->setSub(true);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);
    
    f = new FrBUnaryCppFunction(printwr_FrBObject<FrBString>, FrBString::getCppClass(), false);
    f->setName("printwr");
    f->setSub(true);
    f->setShared(true);
    f->setConst(true);
    
    _cpp_class->addFunction(f);
    
    f = new FrBNoParamCppFunction(show_stack);
    f->setName("showStack");
    f->setConst(true);
    f->setSub(true);
    f->setShared(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addFunction(f);
    
    f = new FrBNoParamCppFunction(show_mem);
    f->setName("showMem");
    f->setConst(true);
    f->setSub(true);
    f->setShared(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addFunction(f);
    
    return _cpp_class;
}

FrBClass * FrBDebug::getClass()
{
    frb_assert2(_cpp_class != NULL, "FrBDebug::getClass(), call initClass() first");
    return _cpp_class;
}

FrBDebug::~FrBDebug()
{
}


