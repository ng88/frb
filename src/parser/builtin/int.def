/*            FrBInt            */

FrBBaseObject * operator_add_FrBInt(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    FrBInt * r = new FrBInt((static_cast<FrBInt*>(me))->value() + (static_cast<FrBInt*>(arg0))->value());
    e.addGarbagedObject(r);
    return r;
}

FrBBaseObject * operator_mul_FrBInt(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    FrBInt * r = new FrBInt((static_cast<FrBInt*>(me))->value() * (static_cast<FrBInt*>(arg0))->value());
    e.addGarbagedObject(r);
    return r;
}

FrBBaseObject * operator_affect_FrBInt(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    (static_cast<FrBInt*>(me))->setValue( (static_cast<FrBInt*>(arg0))->value() );
    return me;
}

FrBCppClass * FrBInt::initClass()
{
    frb_assert2(_cpp_class == NULL, "FrBInt::initClass(), already initialized");
    
    _cpp_class = new FrBCppClass(new FrBPrimitive::Allocator());
    _cpp_class->setName("Int");
    //_cpp_class->setShared(false);
    //_cpp_class->setAbstract(false);
    _cpp_class->setSealed(true);
    _cpp_class->setScope(SC_PUBLIC);
    
    FrBFunction * f = new FrBUnaryCppFunction(operator_add_FrBInt, _cpp_class, false);
    f->setReturnType(_cpp_class);
    f->setName("operator+(FrBint)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_ADD, f);
    
    f = new FrBUnaryCppFunction(operator_mul_FrBInt, _cpp_class, false);
    f->setReturnType(_cpp_class);
    f->setName("operator*(FrBint)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_MUL, f);
    
    f = new FrBUnaryCppFunction(operator_affect_FrBInt, _cpp_class, false);
    f->setReturnType(_cpp_class);
    f->setName("operator=(FrBint)");
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_ASSIGN_VAL, f);

    //TODO ajouter _cpp_class au module frb::std
    
    return _cpp_class;
}
