/***************************************************************************
 *   This file is part of the FrB project                                  *
 *                                                                         *
 *   FrB project                                                           *
 *                                                                         *
 *   Copyright (C) 2006, 2007 by GUILLAUME Nicolas                         *
 *   ng@ngsoft-fr.com                                                      *
 *                                                                         *
 *   http://frb.ngsoft-fr.com/                                             *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; version 2 of the License only.          *
 *   See the COPYING file.                                                 *
 ***************************************************************************/




/*            FrBFunctionWrapper            */

FrBBaseObject * function_call(FrBExecutionEnvironment& e, FrBBaseObject * cme, const FrBBaseObjectList& p)
    throw (FrBExecutionException)
{
    //frb_assert2(false, "not yet implemented");
    
    FrBFunctionWrapper * fw = dynamic_cast<FrBFunctionWrapper*>(cme);
    frb_assert(fw);
    
    const FrBFunction * f = fw->value();
    frb_assert(f);

    FrBBaseObject* me = FrBNull::nullValue();


    FrBBaseObjectList * targs = 0;

    if(!f->shared()) /* non-shared fn, me must be provided */
    {

	if(p.size() == 0)
	    throw FrBInvalidNonSharedException(f);

	me = p[0];

	if(!me->getClass()->isCompatibleWith(f->container()))
	   throw FrBIncompatibleClassException(me->getClass(), f->container());

        

	if(!me || FrBNull::isNull(me))
	    throw FrBNullReferenceException();

	
	targs = new FrBBaseObjectList(++(p.begin()), p.end());
	
	
    }


    FrBBaseObject * ret;

    if(f->event())
    {
	e.raiseEvent(me, f, targs ? *targs : p);
	ret = FrBNull::nullValue();
    }
    else
	ret = f->execute(e, me, targs ? *targs : p);
	

    if(targs)
	delete targs;

    return ret;

}

template<> FrBCppClass * FrBFunctionWrapper::initClass()
{
    frb_assert2(_cpp_class == 0, "FrBFunctionWrapper::initClass(), already initialized");
    
    _cpp_class = new FrBCppClass(new FrBPrimitive::Allocator());
    _cpp_class->setName("Function");
    _cpp_class->setSealed(true);
    _cpp_class->setScope(SC_PUBLIC);
    
    FrBFunction * f = new FrBUnaryParamArrayCppFunction(function_call, FrBObject::getCppClass());
    f->setReturnType(FrBObject::getCppClass());
    f->setName("operator()");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_O_BRACKET, f);

    return _cpp_class;
}
