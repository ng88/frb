/***************************************************************************
 *   This file is part of the FrB project                                  *
 *                                                                         *
 *   FrB project                                                           *
 *                                                                         *
 *   Copyright (C) 2006, 2007 by GUILLAUME Nicolas                         *
 *   ng@ngsoft-fr.com                                                      *
 *                                                                         *
 *   http://frb.ngsoft-fr.com/                                             *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; version 2 of the License only.          *
 *   See the COPYING file.                                                 *
 ***************************************************************************/

#include <sstream>


/*            FrBString            */


FrBBaseObject * operator_add_FrBString_FrBString(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    FrBString * r =
        new FrBString((static_cast<FrBString*>(me))->value() + (static_cast<FrBString*>(arg0))->value());
    e.addGarbagedObject(r);
    return r;
}


FrBBaseObject * operator_add_FrBString_FrBInt(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    FrBString * r =
        new FrBString((static_cast<FrBString*>(me))->value() +
                            StringEx::int2string( (static_cast<FrBInt*>(arg0))->value() ) );
    e.addGarbagedObject(r);
    return r;
}

/**
  *  "abc" - 1 -> "ab"
  *  "absalutc" - "salut" -> "abc"
  *  #"abc" -> 3
  *  "a,cde,dfg,e" / "," -> {"a", "cde", "dfg", "e"}
  *  "abc"[2] -> 'c'
  */

/**
  *"abc " * 0 -> ""
  *"abc " * 1 -> "abc "
  *"abc " * 3 -> "abc abc abc "
  *"abc " * -1 -> "cba "
  *"abc " * -3 -> " cba cba cba"
  */
FrBBaseObject * operator_mul_FrBString_FrBInt(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    int c = (static_cast<FrBInt*>(arg0))->value();
    String ret;

    if(c)
    {
	String motif = (static_cast<FrBInt*>(me))->value();
	    
	if(c < 0)
	{
	    c *= -1;
	    motif = StringEx::reverse(motif);
	}

	for(int i = 1; i <= c; ++i)
	    ret.append(motif);
    }

    return e.addGarbagedObject(new FrBString(ret));
}

FrBBaseObject * operator_mul_FrBInt_FrBString(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
   return operator_mul_FrBString_FrBInt(e, arg0, me);
}

FrBBaseObject * operator_add_FrBString_FrBObject(FrBExecutionEnvironment& e, FrBBaseObject * me, FrBBaseObject * arg0)
{
    std::ostringstream tmp;
    tmp << (static_cast<FrBString*>(me))->value();

    if(FrBNull::isNull(arg0))
        tmp << "<null>";
    else
        tmp << "<object@" << (long unsigned int)arg0 << ">";
    
    FrBString * r = new FrBString(tmp.str());
    e.addGarbagedObject(r);
    return r;
}



FrBCppClass * FrBString::initClass()
{
    frb_assert2(_cpp_class == 0, "FrBString::initClass(), already initialized");
    
    _cpp_class = new FrBCppClass(new FrBPrimitive::Allocator());
    _cpp_class->setName("String");
    _cpp_class->setSealed(true);
    _cpp_class->setScope(SC_PUBLIC);
    
    FrBFunction * f = new FrBUnaryCppFunction(operator_add_FrBString_FrBString, _cpp_class, false);
    f->setReturnType(_cpp_class);
    f->setName("operator+(String)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_ADD, f);

    f = new FrBUnaryCppFunction(operator_add_FrBString_FrBString, _cpp_class, false);
    f->setReturnType(_cpp_class);
    f->setName("operator&(String)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);

    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_CONCAT, f);
   
    
    f = new FrBUnaryCppFunction(operator_add_FrBString_FrBInt,  FrBInt::getCppClass(), false);
    f->setReturnType(_cpp_class);
    f->setName("operator+(Int)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_ADD, f);

    f = new FrBUnaryCppFunction(operator_add_FrBString_FrBInt,  FrBInt::getCppClass(), false);
    f->setReturnType(_cpp_class);
    f->setName("operator&(Int)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);

    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_CONCAT, f);
    
    f = new FrBUnaryCppFunction(operator_add_FrBString_FrBObject, FrBObject::getCppClass(), false);
    f->setReturnType(_cpp_class);
    f->setName("operator+(Object)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_ADD, f);

    f = new FrBUnaryCppFunction(operator_add_FrBString_FrBObject, FrBObject::getCppClass(), false);
    f->setReturnType(_cpp_class);
    f->setName("operator&(Object)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);

    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_CONCAT, f);

    f = new FrBUnaryCppFunction(operator_mul_FrBString_FrBInt,  FrBInt::getCppClass(), false);
    f->setReturnType(_cpp_class);
    f->setName("operator*(Int)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_MUL, f);

    /*f = new FrBUnaryCppFunction(operator_mul_FrBInt_FrBString,  FrBInt::getCppClass(), false);
    f->setReturnType(_cpp_class);
    f->setName("operator+(Int)");
    f->setConst(true);
    f->setScope(SC_PUBLIC);*/
    
    _cpp_class->addOperator(FrBKeywords::FRB_KW_OP_MUL, f);

    return _cpp_class;
}

