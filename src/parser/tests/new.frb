DefLang EN


Public Class Main

    Public Class A
    
        Private val As Int := Null
    
        Public Sub Initialize(v As Int)
            val := 8 + v
        End Sub
        
    
        Public Sub printMe()
            Debug.println("A at " + Debug.addressof(Me) + ", val=" + val)
        End Sub
    
    End Class
    
    Public Shared Sub main()
        
        Utils.printTitre("debut des tests")
        
        
        Dim list As Utils.LinkedList
        
        list.add(5)
        list.add(4)
        list.add(12)
        list.add(45)
        
        
        Dim it As Utils.LinkedList.Iterator := list.begin()

        
        
        Utils.printTitre("fin des tests")

    End Sub
    
   

End Class















Public Module Utils


    Public Class LinkedList
    
        Private Class Node
            Public next As Node := Null
            Public value As Object := Null
            
            Public Sub Initialize(n As Node, v As Object)
                next := n
                value := v
            End Sub
            
            Public Sub add(n As Node)
                If Utils.isNull(next) Then
                    next := n
                Else
                    next.add(n)
                End If
            End Sub
        End Class
        
        Public Class Iterator
            Private pos As Node := Null
            
            Public Sub Initialize(n As Node)
                pos := n
            End Sub
            
            'to be replaced by operator overloading
            Public Function inc() As Iterator
                If Utils.isNull(pos) Then Return Null
                
                If Utils.isNull(pos.next) Then
                    Return Null
                Else
                    pos := pos.next
                    Return Me
                End If
            End Function
            
            Public Function val() As Object
                If Utils.isNull(pos) Then
                    Return Null
                Else
                    Return pos.value
                End If
            End Function
            
        End Class
    
        Protected root As Node := Null
        
        
        Public Sub add(v As Object)
            Dim n As Node := New Node(Null, v)
            
            If Utils.isNull(root) Then
                root := n
            Else
                root.add(n)
            End If
            
        End Sub
        
        Public Function begin() As Iterator
            Return New Iterator(root)
        End Function
        
        Public Function end() As Iterator
            Return Null
        End Function
    
    End Class


    Public Shared Function isNull(o As Object) As Bool
        Return Debug.addressof(o) == Debug.addressof(Null)
    End Function

    Public Shared Sub printTitre(t As String)
        Debug.println(titre(t, 50))
    End Sub
    
    Public Shared Function titre(chaine As String, tailleTotale As Int) As String
    
        If chaine.size() Mod 2 >= 1 Then
            chaine := chaine + " "
        End If
        
        Dim nbTirets As Int := (tailleTotale - chaine.size()) / 2 - 2
        
        If nbTirets <= 0 Then
            Return chaine
        Else
            Dim tirets As String := "-" * nbTirets
            Return tirets + " " + chaine + " " + tirets
        End If
    
    End Function
    
    
End Module
