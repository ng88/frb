DefLang EN


Public Class Main

    Public Class A
    
        Private val As Int := Null
    
        Public Sub Initialize(v As Int)
            val := 8 + v
        End Sub

                
        Public Sub Initialize(v As Int, w As Int, s As String)
            Debug.println(s)
            val := 8 + v * w
        End Sub
        
    
        Public Sub printMe()
            Debug.println("A at " + Debug.addressof(Me) + ", val=" + val)
        End Sub
    
    End Class
    
    Public Class B
        Public v As Int
    End Class
    
    Public Shared Sub tc(c As Class, a As Int)
        Dim o As Object := Cast(c, a)
    End Sub
    
    Public Shared Sub main()

    
        Utils.printTitre("debut des test de la LinkedList")
        
        
        Dim list As Utils.LinkedList
        
        list.add(5)
        list.add(4)
        list.add(12)
        list.add(45)
        list.add(78)
        list.add(0)
        list.addHead(15)
        list.add(70)
        list.addHead(789)
        
        
        Dim it As Utils.LinkedList.Iterator := Null
       
        Dim i As Int
        
        For i := 1 To 2
        
            Debug.println("Contenu de la liste :")
            
            For it := list.begin() To list.end()
                Dim val As Int := Cast(Int, it.val())
                Debug.println(" |_ " + val )
            Next
            
            If i == 1 Then
                Debug.println("Renversement de la liste...")
                list.reverse()
            End If
            
        Next
        
        
        Utils.printTitre("fin des tests")

    End Sub
    
   

End Class















Public Module Utils


    Public Class LinkedList
    
        Private Class Node
            Public next As Node := Null
            Public value As Object := Null
            
            Public Sub Initialize(n As Node, v As Object)
                next := n
                value := v
            End Sub
            
            Public Sub add(n As Node)
                If Utils.isNull(next) Then
                    next := n
                Else
                    next.add(n)
                End If
            End Sub
            
            
            Public Function reverse(prec As Node) As Node
                Dim n As Node := next
                next := prec

                If Utils.isNull(n) Then
                    Return Me
                Else
                    Return n.reverse(Me)
                End If
                
            End Function
            
            Public Function size() As Int
                If Utils.isNull(next) Then
                    Return 1
                Else
                    Return next.size() + 1
                End If
            End Function
        
        End Class
        
        Public Class Iterator
            Private pos As Node := Null
            
            Private Shared end As Iterator := New Iterator(Null)
            
            Public Sub Initialize(n As Node)
                pos := n
            End Sub
            
            Public Shared Sub aaa()
                Debug.println("foo")
            End Sub
            
            Public Operator++() As Iterator
                If Utils.isNull(pos) Then Return end
                
                If Utils.isNull(pos.next) Then
                    pos := Null
                    Return end
                Else
                    pos := pos.next
                    Return Me
                End If
            End Operator
            
            Public Operator<=(o As Iterator) As Bool
                Return Not Debug.addressof(Me.pos) == Debug.addressof(o.pos)
            End Operator
            
            Public Function val() As Object
                If Utils.isNull(pos) Then
                    Return Null
                Else
                    Return pos.value
                End If
            End Function
            
        End Class
    
        Protected root As Node := Null

        Public Sub add(v As Object)
            Dim n As Node := New Node(Null, v)
            
            If Utils.isNull(root) Then
                root := n
            Else
                root.add(n)
            End If
            
        End Sub
        
        Public Sub addHead(v As Object)
            
            root := New Node(root, v)
            
        End Sub
        
        Public Sub reverse()
            If Utils.isNull(root) Then
                
            Else
                root := root.reverse(Null)
            End If
        End Sub
        
        Public Function size() As Int
            If Utils.isNull(root) Then
                Return 0
            Else
                Return root.size()
            End If
        End Function
        
        Public Function begin() As Iterator
            Return New Iterator(root)
        End Function
        
        Public Function end() As Iterator
            Return Iterator.end
        End Function
    
    End Class

    
    

    'to be replaced by o Is Null
    Public Shared Function isNull(o As Object) As Bool
        Return Debug.addressof(o) == Debug.addressof(Null)
    End Function

    Public Shared Sub printTitre(t As String)
        Debug.println(titre(t, 50))
    End Sub
    
    Public Shared Function titre(chaine As String, tailleTotale As Int) As String
    
        If #chaine Mod 2 >= 1 Then
            chaine := chaine + " "
        End If
        
        Dim nbTirets As Int := (tailleTotale - chaine.size()) / 2 - 2
        
        If nbTirets <= 0 Then
            Return chaine
        Else
            Dim tirets As String := "-" * nbTirets
            Return tirets + " " + chaine + " " + tirets
        End If
    
    End Function
    
    
End Module
