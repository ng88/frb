DefLang EN


Public Class Main

     
    Public Shared Sub main()
   
    'This shows the lazy evaluation for And & Or
    
    Debug.println(" True And True = " & bool2str( showEval(True, "v1") And showEval(True, "v2") ) )
    Debug.println(" True And False = " & bool2str( showEval(True, "v1") And showEval(False, "v2") ) )
    Debug.println(" False And True = " & bool2str( showEval(False, "v1") And showEval(True, "v2") ) )
    Debug.println(" False And False = " & bool2str( showEval(False, "v1") And showEval(False, "v2") ) )
    
    Debug.println(" True Or True = " & bool2str( showEval(True, "v1") Or showEval(True, "v2") ) )
    Debug.println(" True Or False = " & bool2str( showEval(True, "v1") Or showEval(False, "v2") ) )
    Debug.println(" False Or True = " & bool2str( showEval(False, "v1") Or showEval(True, "v2") ) )
    Debug.println(" False Or False = " & bool2str( showEval(False, "v1") Or showEval(False, "v2") ) )
    
    Dim c As IntComplex, d As IntComplex := New IntComplex(1, 2), e As IntComplex := New IntComplex(0, 5)
    
    
    Debug.println("i="&IntComplex.i.toString())
    
    Debug.println("c=" & c.toString() & " d=" & d.toString() & " e=" & e.toString())
    
    c := IntComplex.i + d + e
    
    Debug.println("c=" & c.toString() & " d=" & d.toString() & " e=" & e.toString())
    
    c := IntComplex.i * 3 + 2
    
    c:= -c
    
    Debug.println("c=" & c.toString() & " d=" & d.toString() & " e=" & e.toString())
    
    End Sub
    
    Public Shared Function showEval(c As Bool, s As String) As Bool
        Debug.println(s & " is evaluated")
        Return c
    End Function
    
    Public Shared Function bool2str(c As Bool) As String
        If c Then
            Return "True"
        Else
            Return "False"
        End If
    End Function
    
End Class


Public Class IntComplex

    Private re As Int
    Private im As Int
    
    Public Shared i As IntComplex := New IntComplex(0, 1)
    
    
    Public Sub Initialize()
    End Sub
    
    Public Sub Initialize(re As Int)
        Me.re := re
    End Sub

    Public Sub Initialize(re As Int, im As Int)
        Me.re := re
        Me.im := im
    End Sub
    
    
    Public Operator+(re As Int) As IntComplex
        Return Me + New IntComplex(re)
    End Operator
    
    Public Operator*(re As Int) As IntComplex
        Return Me * New IntComplex(re)
    End Operator
    
    
    Public Operator+(o As IntComplex) As IntComplex
        Return New IntComplex(re + o.re, im + o.im)
    End Operator
    
    Public Operator-(o As IntComplex) As IntComplex
        Return New IntComplex(re - o.re, im - o.im)
    End Operator
    
    Public Operator-() As IntComplex
        Return New IntComplex(-re, -im)
    End Operator
    
    
    Public Operator*(o As IntComplex) As IntComplex
        Return New IntComplex(Me.re * o.re - Me.im * o.im, o.im * Me.re + Me.im * o.re)
    End Operator
    
    Public Function toString() As String
        If im == 0 Then
            Return "" + re
        Else If re == 0 Then
            If im == 1 Then
                Return "i"
            Else
                Return "" + im + "i"
           End If
           1
        Else
            If im == 1 Then
                Return "" + re + "+i"
            Else
                If im > 0 Then
                    Return "" + re + "+" + im + "i"
                Else
                    Return "" + re + "-" + -im + "i"
                End If
            End If
        End If
    End Function

End Class

